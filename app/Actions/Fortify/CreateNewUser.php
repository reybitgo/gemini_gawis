<?php

namespace App\Actions\Fortify;

use App\Models\User;
use App\Models\SystemSetting;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\Rule;
use Laravel\Fortify\Contracts\CreatesNewUsers;
use Laravel\Jetstream\Jetstream;
use Laravel\Fortify\Rules\Password;

class CreateNewUser implements CreatesNewUsers
{
    /**
     * Get the validation rules for passwords.
     *
     * @return array<int, \Illuminate\Contracts\Validation\Rule|array|string>
     */
    protected function passwordRules(): array
    {
        return ['required', 'string', 'min:8', 'confirmed'];
    }

    /**
     * Validate and create a newly registered user.
     *
     * @param  array<string, string>  $input
     */
    public function create(array $input): User
    {
        Validator::make($input, [
            'fullname' => ['required', 'string', 'max:255'],
            'username' => ['required', 'string', 'max:255', 'unique:users', 'regex:/^[a-zA-Z0-9_]+$/'],
            'email' => [
                'nullable',
                'string',
                'email',
                'max:255',
                Rule::unique(User::class)->whereNotNull('email'),
            ],
            'password' => $this->passwordRules(),
            'terms' => ['required', 'accepted'],
            'sponsor_name' => ['nullable', 'string', 'max:255'],
        ], [
            'username.regex' => 'Username can only contain letters, numbers, and underscores.',
        ])->validate();

        // Find sponsor by name, referral code, or session
        $sponsor = null;
        $refCode = session('referral_code'); // Get from session (set when clicking referral link)

        if (!empty($input['sponsor_name'])) {
            // User provided a sponsor name - must be valid
            $sponsor = User::where('username', $input['sponsor_name'])
                          ->orWhere('referral_code', $input['sponsor_name'])
                          ->orWhere('fullname', $input['sponsor_name'])
                          ->first();

            // If sponsor name was provided but not found, throw validation error
            if (!$sponsor) {
                throw \Illuminate\Validation\ValidationException::withMessages([
                    'sponsor_name' => ["The sponsor '{$input['sponsor_name']}' could not be found. Please check the username, referral code, or full name."],
                ]);
            }
        } elseif ($refCode) {
            // Try to find sponsor from session referral code
            $sponsor = User::where('referral_code', $refCode)->first();
        }

        // If still no sponsor, default to admin
        if (!$sponsor) {
            $sponsor = User::where('email', 'admin@gawisherbal.com')->first();
        }

        $userData = [
            'fullname' => $input['fullname'],
            'username' => strtolower($input['username']),
            'email' => !empty($input['email']) ? $input['email'] : null,
            'password' => Hash::make($input['password']),
            'sponsor_id' => $sponsor ? $sponsor->id : null,
            'suspended_at' => null, // New users are not suspended by default
            // referral_code will be auto-generated by User model boot method
        ];

        // Handle email verification based on whether email is provided
        if (!empty($input['email'])) {
            // Email provided - check if verification is required
            $emailVerificationRequired = SystemSetting::get('email_verification_required', true);
            if (!$emailVerificationRequired) {
                // Auto-verify if verification is disabled
                $userData['email_verified_at'] = now();
            }
            // If required, leave email_verified_at as null (unverified)
        } else {
            // No email provided - set email_verified_at to null
            $userData['email_verified_at'] = null;
        }

        try {
            $user = User::create($userData);

            // Log new user registration
            \App\Models\ActivityLog::createLog(
                type: 'system',
                event: 'user_registered',
                message: sprintf('New user %s registered.', $user->username),
                userId: $user->id
            );

            // Log sponsorship
            if ($sponsor) {
                \App\Models\ActivityLog::createLog(
                    type: 'mlm',
                    event: 'sponsorship',
                    message: sprintf('%s is now sponsored by %s.', $user->username, $sponsor->username),
                    userId: $user->id,
                    relatedUserId: $sponsor->id
                );
            }

        } catch (\InvalidArgumentException $e) {
            // Convert circular reference exception to validation error
            throw \Illuminate\Validation\ValidationException::withMessages([
                'sponsor_name' => [$e->getMessage()],
            ]);
        }

        // Assign default member role
        $user->assignRole('member');

        // Mark referral click as registered if came from referral link
        if ($refCode && $sponsor) {
            \App\Models\ReferralClick::where('user_id', $sponsor->id)
                                    ->where('ip_address', request()->ip())
                                    ->latest()
                                    ->first()
                                    ?->update(['registered' => true]);
        }

        // Send email verification notification if email is provided and verification is required
        if (!empty($input['email']) && !$user->hasVerifiedEmail()) {
            $user->sendEmailVerificationNotification();
        }

        return $user;
    }
}
